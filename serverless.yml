service: flyonthewall

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: us-east-1

  environment:
    USER_TABLE: ${self:custom.userTableName}
    ALERTING_QUEUE: ${self:custom.alertingQueueName}
    PROCESSING_QUEUE: ${self:custom.processingQueueName}
    ALERTING_DLQ: ${self:custom.alertingDlqName}
    PROCESSING_DLQ: ${self:custom.processingDlqName}

functions:
  processCustomer:
    handler: >-
      fly_on_the_wall/lambda_handlers/customer_handlers.process_customer
    timeout: 30
    iamRoleStatementsName: >-
      ${self:service}-${self:provider.stage}-processCustomer
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - processingQueue
              - Arn
          destinations:
            onFailure:
              arn:
                Fn::GetAtt:
                  - processingDlq
                  - Arn
              type: sqs
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource:
          - {"Fn::GetAtt": ["processingDlq", "Arn"]}
          - {"Fn::GetAtt": ["alertingQueue", "Arn"]}
  
  getCustomer:
    handler: >-
      fly_on_the_wall/lambda_handlers/customer_handlers.get_customer
    timeout: 30
    iamRoleStatementsName: >-
      ${self:service}-${self:provider.stage}-getCustomer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - {"Fn::GetAtt": ["tenantTable", "Arn"]}

  createCustomer:
    handler: >-
      fly_on_the_wall/lambda_handlers/customer_handlers.create_customer
    timeout: 30
    iamRoleStatementsName: >-
      ${self:service}-${self:provider.stage}-createCustomer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource:
          - {"Fn::GetAtt": ["tenantTable", "Arn"]}

  updateCustomer:
    handler: >-
      fly_on_the_wall/lambda_handlers/customer_handlers.update_customer
    timeout: 30
    iamRoleStatementsName: >-
      ${self:service}-${self:provider.stage}-updateCustomer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource:
          - {"Fn::GetAtt": ["tenantTable", "Arn"]}

  fleetScan:
    handler: >-
      fly_on_the_wall/lambda_handlers/fleetscan.scan
    timeout: 30
    iamRoleStatementsName: >-
      ${self:service}-${self:provider.stage}-fleetScan
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource:
          - {"Fn::GetAtt": ["tenantTable", "Arn"]}
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource:
          - {"Fn::GetAtt": ["processingQueue", "Arn"]}

  sendAlexaNotif:
    handler: >-
      fly_on_the_wall/lambda_handlers/notifications.send_alexa_notifs
    timeout: 30
    iamRoleStatementsName: >-
      ${self:service}-${self:provider.stage}-sendAlexaNotif
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - alertingQueue
              - Arn
          destinations:
            onFailure:
              arn:
                Fn::GetAtt:
                  - alertingDlq
                  - Arn
              type: sqs
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource:
          - {"Fn::GetAtt": ["alertingDlq", "Arn"]}

custom:
  userTableName: ${self:service}-userTable-${self:provider.stage}
  processingQueueName: ${self:service}-processingQueue-${self:provider.stage}
  alertingQueueName: ${self:service}-alertingQueue-${self:provider.stage}
  processingDlqName: ${self:service}-processingDlq-${self:provider.stage}
  alertingDlqName: ${self:service}-alertingDlq-${self:provider.stage}

  prune:
    automatic: true
    includeLayers: true
    number: 7

resources:
  Resources:
    tenantTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTableName}
        AttributeDefinitions:
          - AttributeName: customer_id
            AttributeType: S
        KeySchema:
          - AttributeName: customer_id
            KeyType: HASH
        ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    processingQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.processingQueueName}

    alertingQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.alertingQueueName}
    
    processingDlq:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.processingDlqName}

    alertingDlq:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.alertingDlqName}

plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  - serverless-prune-plugin
  - serverless-pseudo-parameters
  - serverless-scriptable-plugin